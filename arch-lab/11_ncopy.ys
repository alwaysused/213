#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	#andq %rdx,%rdx		# len <= 0?
	#jle Done		# if so, goto Done:

	iaddq $-6,%rdx		# calculate len - 4
	jg add1                 # if len >= 4 goto Loop

RESTT:
	iaddq $6, %rdx          # restore the old value of len



REST:
	jg Loopp         # if %rdx is greater than 0,then not finished yet
	ret

Loopp:	
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++
	
	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:	

	iaddq $8,%rsi		# len > 0?

	iaddq $-1,%rdx
	jmp REST



add1:
	mrmovq (%rdi), %r10
	iaddq $48,%rdi
	rmmovq %r10,(%rsi)
	andq %r10,%r10
	jle add2
	iaddq $1,%rax


add2:
	mrmovq -40(%rdi), %r11
	
	mrmovq -32(%rdi), %r10
	rmmovq %r11,8(%rsi)

	andq %r11,%r11

	jle add3
	iaddq $1,%rax
add3:

rmmovq %r10,16(%rsi)
mrmovq -24(%rdi), %r11

andq %r10,%r10

jle add4
iaddq $1,%rax

add4:

	rmmovq %r11 ,24(%rsi)
	mrmovq -16(%rdi), %r10
	andq %r11,%r11

	jle add5
	iaddq $1,%rax
add5:

	rmmovq %r10 ,32(%rsi)
	mrmovq -8(%rdi), %r11
	andq %r10,%r10

	jle add6
	iaddq $1,%rax
add6:

	rmmovq %r11 ,40(%rsi)

	andq %r11,%r11

	jle DecreasePtr
	iaddq $1,%rax

DecreasePtr:
	iaddq $48,%rsi
	iaddq $-6,%rdx
	jg add1
	jmp RESTT

Done:
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
